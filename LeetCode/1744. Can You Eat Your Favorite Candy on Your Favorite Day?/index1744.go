package main

import "fmt"

func main() {
	fmt.Println(canEat([]int{46, 5, 47, 48, 43, 34, 15, 26, 11, 25, 41,
		47, 15, 25, 16, 50, 32, 42, 32, 21, 36, 34, 50, 45,
		46, 15, 46, 38, 50, 12, 3, 26, 26, 16, 23, 1, 4, 48,
		47, 32, 47, 16, 33, 23, 38, 2, 19, 50, 6, 19, 29, 3, 27, 12,
		6, 22, 33, 28, 7, 10, 12, 8, 13, 24, 21, 38, 43, 26, 35, 18,
		34, 3, 14, 48, 50, 34, 38, 4, 50, 26, 5, 35, 11, 2, 35, 9,
		11, 31, 36, 20, 21, 37, 18, 34, 34, 10, 21, 8, 5}, [][]int{{85, 54, 42}}))

	fmt.Println(canEat([]int{16, 38, 8, 41, 30, 31, 14, 45, 3, 2, 24, 23,
		38, 30, 31, 17, 35, 4, 9, 42, 28, 18, 37, 18, 14, 46, 11, 13, 19, 3, 5, 39, 24, 48, 20, 29,
		4, 19, 36, 11, 28, 49, 38, 16, 23, 24, 4, 22, 29, 35, 45, 38, 37, 40, 2, 37, 8, 41, 33, 8,
		40, 27, 13, 4, 33, 5, 8, 14, 19, 35, 31, 8, 8}, [][]int{{43, 1054, 49}}))

	fmt.Println(canEat([]int{13, 45, 31, 29, 13, 20, 11, 33, 18,
		13, 10, 39, 43, 36, 5, 38, 27, 38, 10, 33, 46, 17, 20, 28, 41,
		29, 3, 35, 38, 46, 32, 7, 37, 5, 27, 15, 46, 9, 11, 37, 47, 44,
		48, 34, 37, 12, 3, 37, 29, 25, 7, 34, 45, 23, 17, 10, 46, 5, 37,
		34, 5, 45, 5}, [][]int{{13, 4, 91}}))

	fmt.Println(canEat([]int{7, 4, 5, 3, 8}, [][]int{{0, 2, 2}, {4, 2, 4}, {2, 13, 1000000000}}))
	fmt.Println(canEat([]int{5, 2, 6, 4, 1}, [][]int{{3, 1, 2}, {4, 10, 3}, {3, 10, 100}, {4, 100, 30}, {1, 3, 1}}))
}

// [[38,519,36],[62,591,47],[56,137,72],[13,1373,51],[20,355,76],[27,1505,58],[30,1059,16],[44,625,49],[40,1287,27],[5,369,6],[20,307,92],[7,806,42],[33,1672,59],[55,1654,84],[59,730,27],[24,33,63],[27,399,36],[11,1065,10],[39,1649,21],[44,945,49],[56,462,10],[14,341,34],[10,1472,67],[6,1663,91],[15,848,10],[10,742,100],[34,378,49],[25,730,44],[29,847,61],[9,184,58],[59,988,76],[31,1454,13],[21,321,60],[56,914,20],[49,680,26],[41,869,33],[9,1132,59],[3,1200,51],[40,677,56],[1,589,47],[4,1538,29],[37,1489,10],[48,1275,79],[47,793,75],[53,377,13],[27,221,37],[32,1326,45],[38,873,17],[3,630,76],[13,4,91],[18,984,32],[26,1368,23],[59,1151,37],[36,64,82]]

func canEat(candiesCount []int, queries [][]int) []bool {
	sum := make([]int, len(candiesCount)+1)
	for i, v := range candiesCount {
		sum[i+1] = sum[i] + v
	}
	result := make([]bool, len(queries))
	for i, v := range queries {
		types, day, limit := v[0], v[1], v[2]
		minDay := sum[types] / limit
		maxDay := sum[types+1]

		if day >= minDay && day < maxDay {
			result[i] = true
		} else {
			result[i] = false
		}
	}
	return result
}
